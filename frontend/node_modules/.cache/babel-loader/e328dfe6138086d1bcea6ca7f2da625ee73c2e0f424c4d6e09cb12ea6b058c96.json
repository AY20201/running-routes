{"ast":null,"code":"var _jsxFileName = \"/Users/alexyoung/Documents/React/app1/src/containers/inputReader.js\",\n  _s = $RefreshSig$();\nimport React, { Component } from \"react\";\nimport styles from '../styles.module.css';\nimport { MapContainer, TileLayer, Polyline, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction setMapBounds() {\n  _s();\n  const map = useMap();\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n_s(setMapBounds, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n  return [useMap];\n});\nclass InputReader extends Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = (e, key) => {\n      let copyParams = {\n        ...this.state.textBoxValues,\n        [key]: e.target.value\n      };\n      this.setState({\n        textBoxValues: copyParams\n      });\n      if (this.state.currentPosition.length === 0)\n        //assumes you won't change loc before reloading page\n        {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n          } else {\n            console.log(\"Could not use geolocation\");\n          }\n        }\n    };\n    this.handleSubmit = () => {\n      const params = this.state.textBoxValues;\n      if (params.loc_lat === undefined || params.loc_lon === undefined || params.loc_lat === \"\" || params.loc_lon === \"\") {\n        const pos = this.state.currentPosition;\n        let copyParams = {\n          ...this.state.textBoxValues,\n          loc_lat: pos[0],\n          loc_lon: pos[1]\n        };\n        this.setState({\n          textBoxValues: copyParams\n        }, () => {\n          this.getLoops();\n        });\n      } else {\n        this.getLoops();\n      }\n      console.log(\"Button Pressed\");\n    };\n    this.cyclePaths = change => {\n      let new_index = this.state.displayedPathIndex + change;\n      if (this.state.displayedPathIndex !== -1) {\n        if (new_index >= 0 && new_index < this.state.data.loops.length) {\n          this.setState({\n            displayedPathIndex: new_index\n          });\n        }\n      }\n    };\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      this.setState({\n        currentPosition: [lat, lon]\n      });\n    };\n    this.MapDisplay = () => {\n      const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex].path : [];\n      const currentPosition = activePath.length > 0 ? activePath[0] : this.state.currentPosition;\n      const lineColor = {\n        color: 'red'\n      };\n      if (currentPosition.length === 0) {\n        //await current position\n        navigator.geolocation.getCurrentPosition(this.success, this.error);\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(MapContainer, {\n          ref: this.state.mapRef,\n          className: styles.map,\n          center: currentPosition,\n          zoom: 15,\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            pathOptions: lineColor,\n            positions: activePath\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this);\n      }\n    };\n    this.state = {\n      data: {},\n      textBoxValues: {},\n      currentPosition: [],\n      displayedPathIndex: -1\n    };\n  }\n  refocusMap() {}\n  getLoops() {\n    const params = this.state.textBoxValues;\n    fetch(`http://127.0.0.1:5000/data?dist_min=${params.min_dist}&dist_max=${params.max_dist}&loc_lat=${params.loc_lat}&loc_lon=${params.loc_lon}`, {\n      method: 'get',\n      mode: 'cors'\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        data: data\n      });\n      if (data.loops.length > 0) {\n        this.setState({\n          displayedPathIndex: 0\n        }, () => {\n          this.refocusMap();\n        });\n      } else {\n        console.log(\"No loops were found\");\n      }\n      console.log(data);\n    });\n  }\n  error() {\n    console.log(\"Could not get location\");\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(this.MapDisplay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: this.handleSubmit,\n          children: \"FIND ROUTES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"loc_lat\") //location lat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"loc_lon\") //location lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input + \" \" + styles.short,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"min_dist\") //min distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input + \" \" + styles.short,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"max_dist\") //max distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(-1),\n          children: \"PREV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(1),\n          children: \"NEXT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this);\n  }\n}\n;\nexport default InputReader;","map":{"version":3,"names":["React","Component","styles","MapContainer","TileLayer","Polyline","useMap","setMapBounds","map","InputReader","constructor","props","handleInputChange","e","key","copyParams","state","textBoxValues","target","value","setState","currentPosition","length","navigator","geolocation","getCurrentPosition","success","error","console","log","handleSubmit","params","loc_lat","undefined","loc_lon","pos","getLoops","cyclePaths","change","new_index","displayedPathIndex","data","loops","position","lat","coords","latitude","lon","longitude","MapDisplay","activePath","path","lineColor","color","mapRef","refocusMap","fetch","min_dist","max_dist","method","mode","then","res","json","render","container","button","input","short"],"sources":["/Users/alexyoung/Documents/React/app1/src/containers/inputReader.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport styles from '../styles.module.css'\nimport { MapContainer, TileLayer, Polyline, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nfunction setMapBounds()\n{\n    const map = useMap();\n\n    return(\n        <div></div>\n    );\n}\n\nclass InputReader extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = \n        {\n            data: {},\n            textBoxValues: {},\n            currentPosition: [],\n            displayedPathIndex: -1,\n            \n        }\n    }\n\n    handleInputChange = (e, key) => {\n        let copyParams = { ...this.state.textBoxValues, [key]: e.target.value};\n        this.setState({textBoxValues: copyParams});\n\n        if(this.state.currentPosition.length === 0) //assumes you won't change loc before reloading page\n        {\n            if(navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(this.success, this.error);\n            } else {\n                console.log(\"Could not use geolocation\");\n            }\n        }\n    }\n\n    handleSubmit = () =>\n    {\n        const params = this.state.textBoxValues;\n        \n        if(params.loc_lat === undefined || params.loc_lon === undefined || params.loc_lat === \"\" || params.loc_lon === \"\") {\n            const pos = this.state.currentPosition;\n            let copyParams = { ...this.state.textBoxValues, loc_lat: pos[0], loc_lon: pos[1]};\n            this.setState({textBoxValues: copyParams}, () => {\n                this.getLoops()\n            });\n        } else {\n            this.getLoops();\n        }\n\n        console.log(\"Button Pressed\");\n    }\n\n    cyclePaths = (change) =>\n    {\n        let new_index = this.state.displayedPathIndex + change;\n        if(this.state.displayedPathIndex !== -1) {\n            if(new_index >= 0 && new_index < this.state.data.loops.length) {\n                this.setState({displayedPathIndex: new_index})\n            }\n        }\n    }\n\n    refocusMap() {\n        \n    }\n\n    getLoops() {\n        const params = this.state.textBoxValues;\n\n        fetch(`http://127.0.0.1:5000/data?dist_min=${params.min_dist}&dist_max=${params.max_dist}&loc_lat=${params.loc_lat}&loc_lon=${params.loc_lon}`, { method: 'get', mode: 'cors' }).then(\n            res => res.json()\n        ).then(\n            data => {\n                this.setState({data: data});\n                if(data.loops.length > 0) {\n                    this.setState({displayedPathIndex: 0}, () => {\n                        this.refocusMap();\n                    });\n                } else {\n                    console.log(\"No loops were found\");\n                }\n                console.log(data);\n            }\n        );\n    }\n\n    success = (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        \n        this.setState({currentPosition: [lat, lon]});\n    }\n\n    error() {\n        console.log(\"Could not get location\");\n    }\n    \n    MapDisplay = () => {\n        const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex].path : [];\n        const currentPosition = activePath.length > 0 ? activePath[0] : this.state.currentPosition;\n        const lineColor = { color: 'red' }\n\n        if(currentPosition.length === 0) { //await current position\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n            return (\n                <div></div>\n            );\n        } else {\n            return (\n                <MapContainer ref = {this.state.mapRef} className = {styles.map} center={currentPosition} zoom={15}>\n                    <TileLayer\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                    />\n                    <Polyline pathOptions={lineColor} positions={activePath} />\n                </MapContainer>\n            );\n        }\n    }\n    \n    render(){\n        return(\n            <div>\n                <this.MapDisplay/>\n                <div className={styles.container}>\n                    <button className={styles.button} onClick={this.handleSubmit}>\n                        FIND ROUTES\n                    </button>\n                    <input\n                        className={styles.input}\n                        type='number'\n                        onChange={e => this.handleInputChange(e, \"loc_lat\")} //location lat\n                    />\n                    <input\n                        className={styles.input}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"loc_lon\")} //location lon\n                    />\n                    <input\n                        className={styles.input + \" \" + styles.short}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"min_dist\")} //min distance\n                    />\n                    <input\n                        className={styles.input + \" \" + styles.short}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"max_dist\")} //max distance\n                    />\n                    <button className={styles.button} onClick={() => this.cyclePaths(-1)}>\n                        PREV\n                    </button>\n                    <button className={styles.button} onClick={() => this.cyclePaths(1)}>\n                        NEXT\n                    </button>\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default InputReader;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}