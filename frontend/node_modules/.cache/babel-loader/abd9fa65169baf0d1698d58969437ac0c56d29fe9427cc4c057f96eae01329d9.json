{"ast":null,"code":"var _jsxFileName = \"/Users/alexyoung/Documents/React/app1/src/containers/inputReader.js\";\nimport React, { Component } from \"react\";\nimport MapRenderer from './MapRenderer';\nimport styles from '../styles.module.css';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass InputReader extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data: {},\n      textBoxValues: {},\n      currentPosition: [],\n      usedPosition: [],\n      displayedPathIndex: -1,\n      kilometers: 0,\n      loading: false\n    };\n    this.markerCallback = position => {\n      console.log(position);\n      this.setState({\n        usedPosition: position\n      });\n    };\n    this.handleInputChange = (e, key) => {\n      let copyParams = {\n        ...this.state.textBoxValues,\n        [key]: e.target.value\n      };\n      this.setState({\n        textBoxValues: copyParams\n      });\n      if (this.state.currentPosition.length === 0)\n        //assumes you won't change loc before reloading page\n        {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n          } else {\n            console.log(\"Could not use geolocation\");\n          }\n        }\n    };\n    this.handleSubmit = () => {\n      const params = this.state.textBoxValues;\n      if (params.loc_lat === undefined || params.loc_lon === undefined || params.loc_lat === \"\" || params.loc_lon === \"\") {\n        const pos = this.state.currentPosition;\n        let copyParams = {\n          ...this.state.textBoxValues,\n          loc_lat: pos[0],\n          loc_lon: pos[1]\n        };\n        this.setState({\n          textBoxValues: copyParams\n        }, () => {\n          this.getLoops();\n        });\n      } else {\n        this.getLoops();\n      }\n      console.log(\"Button Pressed\");\n    };\n    this.cyclePaths = change => {\n      let new_index = this.state.displayedPathIndex + change;\n      if (this.state.displayedPathIndex !== -1) {\n        if (new_index >= 0 && new_index < this.state.data.loops.length) {\n          this.setState({\n            displayedPathIndex: new_index\n          });\n        }\n      }\n    };\n    this.setDistanceMode = km => {\n      this.setState({\n        kilometers: km\n      });\n    };\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      this.setState({\n        currentPosition: [lat, lon]\n      });\n    };\n    this.MapDisplay = () => {\n      //const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex].path : [];\n      const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex] : {\n        path: [],\n        center: [],\n        distance: 0.0\n      };\n      const currentPosition = activePath.path.length > 0 ? activePath.path[0] : this.state.currentPosition;\n      if (currentPosition.length === 0) {\n        //await current position\n        navigator.geolocation.getCurrentPosition(this.success, this.error);\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(MapRenderer, {\n            currentPosition: currentPosition,\n            activePath: activePath,\n            kilometers: this.state.kilometers,\n            markerCallback: this.markerCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this);\n      }\n    };\n  }\n  getLoops() {\n    const params = this.state.textBoxValues;\n    this.setState({\n      loading: true\n    });\n    fetch(`http://127.0.0.1:5000/data?dist_min=${params.min_dist}&dist_max=${params.max_dist}&loc_lat=${params.loc_lat}&loc_lon=${params.loc_lon}&km=${this.state.kilometers}`, {\n      method: 'get',\n      mode: 'cors'\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        data: data\n      });\n      this.setState({\n        loading: false\n      });\n      if (data.loops.length > 0) {\n        this.setState({\n          displayedPathIndex: 0\n        });\n      } else {\n        console.log(\"No loops were found\");\n      }\n      console.log(data);\n    });\n  }\n  error() {\n    console.log(\"Could not get location\");\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(this.MapDisplay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: this.handleSubmit,\n          disabled: this.state.loading,\n          children: \"FIND ROUTES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          placeholder: \"latitude\",\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"loc_lat\") //location lat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          placeholder: \"longitude\",\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"loc_lon\") //location lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input + \" \" + styles.short,\n          placeholder: \"min dist\",\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"min_dist\") //min distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input + \" \" + styles.short,\n          placeholder: \"max dist\",\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"max_dist\") //max distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(-1),\n          disabled: this.state.displayedPathIndex !== -1 ? this.state.displayedPathIndex === 0 : true,\n          children: \"PREV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(1),\n          disabled: this.state.displayedPathIndex !== -1 ? this.state.displayedPathIndex === this.state.data.loops.length - 1 : true,\n          children: \"NEXT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.setDistanceMode(1),\n          disabled: this.state.kilometers,\n          children: \"KM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.setDistanceMode(0),\n          disabled: !this.state.kilometers,\n          children: \"MI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.textBlock,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.paragraph,\n          children: \"runningroutes.com is a simple tool that uses the depth first search (DFS) algorithm with OpenStreetMap Data to find and display running routes in your area. Whether you are an experienced runner or a beginner, running the same routes over and over again can get boring. As a high school athlete, I run almost every day, often repeating the exact same path as I did the day before. With runningroutes.com, runners with the same problem can quickly find new routes within a desired distance range from a specified starting point. If no location is specified, the algorithm uses your current location. Similarly, if you are in a new area or just getting out for the first time, this tool is a great place to start. Be aware that large distances (more than 7 miles) or starting points in dense areas will take a very long time to be computed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n}\n;\nexport default InputReader;","map":{"version":3,"names":["React","Component","MapRenderer","styles","InputReader","state","data","textBoxValues","currentPosition","usedPosition","displayedPathIndex","kilometers","loading","markerCallback","position","console","log","setState","handleInputChange","e","key","copyParams","target","value","length","navigator","geolocation","getCurrentPosition","success","error","handleSubmit","params","loc_lat","undefined","loc_lon","pos","getLoops","cyclePaths","change","new_index","loops","setDistanceMode","km","lat","coords","latitude","lon","longitude","MapDisplay","activePath","path","center","distance","fetch","min_dist","max_dist","method","mode","then","res","json","render","container","button","input","short","textBlock","paragraph"],"sources":["/Users/alexyoung/Documents/React/app1/src/containers/inputReader.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport MapRenderer from './MapRenderer'\nimport styles from '../styles.module.css'\nimport 'leaflet/dist/leaflet.css'\n\nclass InputReader extends Component {\n    \n    state = \n    {\n        data: {},\n        textBoxValues: {},\n        currentPosition: [],\n        usedPosition: [],\n        displayedPathIndex: -1,\n        kilometers: 0,\n        loading: false\n    }\n\n    markerCallback = (position) => {\n        console.log(position);\n        this.setState({usedPosition: position});\n    }\n\n    handleInputChange = (e, key) => {\n        let copyParams = { ...this.state.textBoxValues, [key]: e.target.value};\n        this.setState({textBoxValues: copyParams});\n\n        if(this.state.currentPosition.length === 0) //assumes you won't change loc before reloading page\n        {\n            if(navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(this.success, this.error);\n            } else {\n                console.log(\"Could not use geolocation\");\n            }\n        }\n    }\n\n    handleSubmit = () =>\n    {\n        const params = this.state.textBoxValues;\n        \n        if(params.loc_lat === undefined || params.loc_lon === undefined || params.loc_lat === \"\" || params.loc_lon === \"\") {\n            const pos = this.state.currentPosition;\n            let copyParams = { ...this.state.textBoxValues, loc_lat: pos[0], loc_lon: pos[1]};\n            this.setState({textBoxValues: copyParams}, () => {\n                this.getLoops()\n            });\n        } else {\n            this.getLoops();\n        }\n\n        console.log(\"Button Pressed\");\n    }\n\n    cyclePaths = (change) =>\n    {\n        let new_index = this.state.displayedPathIndex + change;\n        if(this.state.displayedPathIndex !== -1) {\n            if(new_index >= 0 && new_index < this.state.data.loops.length) {\n                this.setState({displayedPathIndex: new_index});\n            }\n        }\n    }\n\n    setDistanceMode = (km) =>\n    {\n        this.setState({kilometers: km});\n    }\n\n    getLoops() {\n        const params = this.state.textBoxValues;\n        this.setState({loading: true});\n\n        fetch(`http://127.0.0.1:5000/data?dist_min=${params.min_dist}&dist_max=${params.max_dist}&loc_lat=${params.loc_lat}&loc_lon=${params.loc_lon}&km=${this.state.kilometers}`, { method: 'get', mode: 'cors' }).then(\n            res => res.json()\n        ).then(\n            data => {\n                this.setState({data: data});\n                this.setState({loading: false});\n                if(data.loops.length > 0) {\n                    this.setState({displayedPathIndex: 0});\n                } else {\n                    console.log(\"No loops were found\");\n                }\n                console.log(data);\n            }\n        );\n    }\n\n    success = (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        \n        this.setState({currentPosition: [lat, lon]});\n    }\n\n    error() {\n        console.log(\"Could not get location\");\n    }\n    \n    MapDisplay = () => {\n        //const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex].path : [];\n        const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex] : {path: [], center: [], distance: 0.0}\n        const currentPosition = activePath.path.length > 0 ? activePath.path[0] : this.state.currentPosition;\n\n        if(currentPosition.length === 0) { //await current position\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n            return (\n                <div></div>\n            );\n        } else {\n            return (\n                <div>\n                    <MapRenderer currentPosition={currentPosition} activePath={activePath} kilometers={this.state.kilometers} markerCallback={this.markerCallback}/>\n                </div>\n            );\n        }\n    }\n    \n    render(){\n        return(\n            <div>\n                <this.MapDisplay/>\n                <div className={styles.container}>\n                    <button className={styles.button} onClick={this.handleSubmit} disabled={this.state.loading}>\n                        FIND ROUTES\n                    </button>\n                    <input\n                        className={styles.input}\n                        placeholder=\"latitude\"\n                        type='number'\n                        onChange={e => this.handleInputChange(e, \"loc_lat\")} //location lat\n                    />\n                    <input\n                        className={styles.input}\n                        placeholder=\"longitude\"\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"loc_lon\")} //location lon\n                    />\n                    <input\n                        className={styles.input + \" \" + styles.short}\n                        placeholder=\"min dist\"\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"min_dist\")} //min distance\n                    />\n                    <input\n                        className={styles.input + \" \" + styles.short}\n                        placeholder=\"max dist\"\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"max_dist\")} //max distance\n                    />\n                    <button className={styles.button} onClick={() => this.cyclePaths(-1)} disabled={this.state.displayedPathIndex !== -1 ? this.state.displayedPathIndex === 0 : true}>PREV</button>\n                    <button className={styles.button} onClick={() => this.cyclePaths(1)} disabled={this.state.displayedPathIndex !== -1 ? this.state.displayedPathIndex === this.state.data.loops.length - 1 : true}>NEXT</button>\n\n                    <button className={styles.button} onClick={() => this.setDistanceMode(1)} disabled={this.state.kilometers}>KM</button>\n                    <button className={styles.button} onClick={() => this.setDistanceMode(0)} disabled={!this.state.kilometers}>MI</button>\n                </div>\n                <div className={styles.textBlock}>\n                    <p className={styles.paragraph}>\n                        runningroutes.com is a simple tool that uses the depth first search (DFS) algorithm with OpenStreetMap Data to find and display running routes in your area.\n                        Whether you are an experienced runner or a beginner, running the same routes over and over again can get boring. As a high school athlete, I run almost every day,\n                        often repeating the exact same path as I did the day before. With runningroutes.com, runners with the same problem can quickly find new routes within a desired\n                        distance range from a specified starting point. If no location is specified, the algorithm uses your current location. Similarly, if you are in a new area or just\n                        getting out for the first time, this tool is a great place to start. Be aware that large distances (more than 7 miles) or starting points in dense areas\n                        will take a very long time to be computed.\n                    </p>\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default InputReader;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}