{"ast":null,"code":"var _jsxFileName = \"/Users/alexyoung/Documents/React/app1/src/containers/RoutePolyline.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Polyline, Popup, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction findEstimatedTime(paceInSeconds, distance) {\n  let totalTime = Math.floor(distance * paceInSeconds);\n  let hours = Math.floor(totalTime / 3600);\n  let minutes = Math.floor((totalTime - hours * 3600) / 60);\n  let seconds = totalTime - hours * 3600 - minutes * 60;\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n  if (minutes < 10 && hours >= 1) {\n    minutes = `0${minutes}`;\n  }\n  if (hours === 0) {\n    return `${minutes}:${seconds}`;\n  } else {\n    return `${hours}:${minutes}:${seconds}`;\n  }\n}\nfunction RoutePolyline(_ref) {\n  _s();\n  let {\n    path,\n    kilometers\n  } = _ref;\n  const map = useMap();\n  const lineColor = {\n    color: 'rgb(120, 73, 196)'\n  };\n  let dist = path.distance;\n  //console.log(path.distance / path.path.length);\n\n  let t1,\n    t2,\n    t3,\n    eg = \"\";\n  if (kilometers) {\n    dist = dist * 1.609;\n    t1 = `Time at 5:30/kilometer: ${findEstimatedTime(60 * 5.50, dist)}`;\n    t2 = `Time at 5:00/kilometer: ${findEstimatedTime(60 * 5.00, dist)}`;\n    t3 = `Time at 4:30/kilometer: ${findEstimatedTime(60 * 4.50, dist)}`;\n    //eg = `Elevation Gain: ${path.elevation_gain} meters`;\n  } else {\n    t1 = `Time at 9:00/mile: ${findEstimatedTime(60 * 9.00, dist)}`;\n    t2 = `Time at 8:00/mile: ${findEstimatedTime(60 * 8.00, dist)}`;\n    t3 = `Time at 7:00/mile: ${findEstimatedTime(60 * 7.00, dist)}`;\n    //eg = `Elevation Gain: ${Math.floor(path.elevation_gain * 3.28)} feet`;\n  }\n\n  if (path.path.length > 0) {\n    map.setView(path.center, 15);\n  }\n  return /*#__PURE__*/_jsxDEV(Polyline, {\n    pathOptions: lineColor,\n    positions: path.path,\n    children: /*#__PURE__*/_jsxDEV(Popup, {\n      children: [`Distance: ${Math.round(dist * 100.0) / 100.0} ${kilometers ? \"kilometers\" : \"miles\"}`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 105\n      }, this), t1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), t2, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), t3, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(RoutePolyline, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n  return [useMap];\n});\n_c = RoutePolyline;\nexport default _c2 = /*#__PURE__*/React.memo(RoutePolyline);\nvar _c, _c2;\n$RefreshReg$(_c, \"RoutePolyline\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","Polyline","Popup","useMap","findEstimatedTime","paceInSeconds","distance","totalTime","Math","floor","hours","minutes","seconds","RoutePolyline","path","kilometers","map","lineColor","color","dist","t1","t2","t3","eg","length","setView","center","round","memo"],"sources":["/Users/alexyoung/Documents/React/app1/src/containers/RoutePolyline.js"],"sourcesContent":["import React from \"react\";\nimport { Polyline, Popup, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nfunction findEstimatedTime(paceInSeconds, distance)\n{\n    let totalTime = Math.floor(distance * paceInSeconds);\n    let hours = Math.floor(totalTime / 3600);\n    let minutes = Math.floor((totalTime - hours * 3600) / 60)\n    let seconds = totalTime - hours * 3600 - minutes * 60;\n    \n    if(seconds < 10){\n        seconds = `0${seconds}`\n    }\n    if(minutes < 10 && hours >= 1){\n        minutes = `0${minutes}`\n    }\n\n\n    if(hours === 0) {\n        return `${minutes}:${seconds}`;\n    } else {\n        return `${hours}:${minutes}:${seconds}`;\n    }\n}\n\nfunction RoutePolyline({ path, kilometers })\n{\n    const map = useMap();\n    const lineColor = { color: 'rgb(120, 73, 196)' };\n    let dist = path.distance;\n    //console.log(path.distance / path.path.length);\n\n    let t1, t2, t3, eg = \"\";\n    if(kilometers){\n        dist = dist * 1.609;\n        t1 = `Time at 5:30/kilometer: ${findEstimatedTime(60 * 5.50, dist)}`;\n        t2 = `Time at 5:00/kilometer: ${findEstimatedTime(60 * 5.00, dist)}`;\n        t3 = `Time at 4:30/kilometer: ${findEstimatedTime(60 * 4.50, dist)}`;\n        //eg = `Elevation Gain: ${path.elevation_gain} meters`;\n    } else {\n        t1 = `Time at 9:00/mile: ${findEstimatedTime(60 * 9.00, dist)}`;\n        t2 = `Time at 8:00/mile: ${findEstimatedTime(60 * 8.00, dist)}`;\n        t3 = `Time at 7:00/mile: ${findEstimatedTime(60 * 7.00, dist)}`;\n        //eg = `Elevation Gain: ${Math.floor(path.elevation_gain * 3.28)} feet`;\n    }\n\n    if(path.path.length > 0)\n    {\n        map.setView(path.center, 15);\n    }\n\n    return(\n        <Polyline pathOptions={lineColor} positions={path.path}>\n            <Popup>\n                {`Distance: ${Math.round(dist * 100.0) / 100.0} ${kilometers ? \"kilometers\" : \"miles\"}`}<br/>\n                {t1}<br/>\n                {t2}<br/>\n                {t3}<br/>\n            </Popup>\n        </Polyline>\n    );\n}\n\nexport default React.memo(RoutePolyline);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}