{"ast":null,"code":"var _jsxFileName = \"/Users/alexyoung/Documents/React/app1/src/containers/InputReader.js\";\nimport React, { Component } from \"react\";\nimport MapRenderer from './MapRenderer';\nimport styles from '../styles.module.css';\nimport 'leaflet/dist/leaflet.css';\nimport titleImg from '../running_man_text.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass InputReader extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data: {},\n      textBoxValues: {},\n      currentPosition: {},\n      usedPosition: {},\n      displayedPathIndex: -1,\n      kilometers: 0,\n      loading: false,\n      requestError: \"\"\n    };\n    this.markerCallback = position => {\n      let roundedPosition = {\n        lat: position.lat,\n        lng: position.lng\n      };\n      this.setState({\n        usedPosition: roundedPosition\n      });\n    };\n    this.handleInputChange = (e, key) => {\n      let copyParams = {\n        ...this.state.textBoxValues,\n        [key]: e.target.value\n      };\n      this.setState({\n        textBoxValues: copyParams\n      });\n      if (this.state.currentPosition.lat === undefined)\n        //assumes you won't change loc before reloading page\n        {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n          } else {\n            console.log(\"Could not use geolocation\");\n          }\n        }\n    };\n    this.handleSubmit = () => {\n      if (this.state.usedPosition.lat === undefined || this.state.usedPosition.lng === undefined) {\n        this.setState({\n          usedPosition: this.state.currentPosition\n        }, () => {\n          this.getLoops();\n        });\n      } else {\n        this.getLoops();\n      }\n      console.log(\"Button Pressed\");\n    };\n    this.cyclePaths = (change, random) => {\n      if (this.state.displayedPathIndex !== -1) {\n        if (random) {\n          let rand_index = Math.floor(Math.random() * (this.state.data.loops.length - 1));\n          while (rand_index === this.state.displayedPathIndex && this.state.data.loops.length > 1) {\n            rand_index = Math.floor(Math.random() * (this.state.data.loops.length - 1));\n          }\n          this.setState({\n            displayedPathIndex: rand_index\n          });\n        } else {\n          let new_index = this.state.displayedPathIndex + change;\n          if (new_index >= 0 && new_index < this.state.data.loops.length) {\n            this.setState({\n              displayedPathIndex: new_index\n            });\n          }\n        }\n      }\n    };\n    this.setDistanceMode = km => {\n      this.setState({\n        kilometers: km\n      });\n    };\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      this.setState({\n        currentPosition: {\n          lat: lat,\n          lng: lon\n        }\n      });\n    };\n    this.MapDisplay = () => {\n      //const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex].path : [];\n      const activePath = this.state.data.loops !== undefined ? this.state.data.loops[this.state.displayedPathIndex] : {\n        path: [],\n        center: [],\n        distance: 0.0\n      };\n      if (this.state.currentPosition.lat === undefined) {\n        //await current position\n        navigator.geolocation.getCurrentPosition(this.success, this.error);\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(MapRenderer, {\n            currentPosition: this.state.currentPosition,\n            activePath: activePath,\n            kilometers: this.state.kilometers,\n            markerCallback: this.markerCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this);\n      }\n    };\n  }\n  getLoops() {\n    this.setState({\n      loading: true\n    });\n    this.setState({\n      requestError: \"\"\n    });\n    fetch(`http://127.0.0.1:5000/data?dist_min=${this.state.textBoxValues.min_dist}&dist_max=${this.state.textBoxValues.max_dist}&loc_lat=${this.state.usedPosition.lat}&loc_lon=${this.state.usedPosition.lng}&km=${this.state.kilometers}&count=${this.state.textBoxValues.count}`, {\n      method: 'get',\n      mode: 'cors'\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        data: data\n      });\n      this.setState({\n        loading: false\n      });\n      if (data.loops.length > 0) {\n        this.setState({\n          displayedPathIndex: 0\n        });\n      } else {\n        this.setState({\n          requestError: \"No routes were found. Try adjusting your distances or starting location.\"\n        });\n        this.setState({\n          data: {}\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n      this.setState({\n        loading: false\n      });\n      this.setState({\n        requestError: \"The request failed. Adjust your parameters and try again, or check console for error messages.\"\n      });\n    });\n  }\n  error() {\n    console.log(\"Could not get location\");\n  }\n  render() {\n    const errorMessage = this.state.requestError === \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 64\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.error,\n      children: this.state.requestError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 80\n    }, this);\n    console.log(this.state.data);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.gradient,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: titleImg,\n          alt: \"Running Routes\",\n          className: styles.titleimg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(this.MapDisplay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), errorMessage, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: this.handleSubmit,\n          disabled: this.state.loading,\n          children: \"FIND ROUTES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          placeholder: \"Min Dist\",\n          title: \"Minimum possible distance for a route\",\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"min_dist\") //min distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          placeholder: \"Max Dist\",\n          title: \"Maximum possible distance for a route\",\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"max_dist\") //max distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input + \" \" + styles.short,\n          placeholder: \"#\",\n          title: \"Amount of routes to find (automatic if blank)\",\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"count\") //max distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(-1, false),\n          disabled: this.state.data === {} ? this.state.displayedPathIndex === 0 : true,\n          children: \"PREV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(1, false),\n          disabled: this.state.data === {} ? this.state.displayedPathIndex === this.state.data.loops.length - 1 : true,\n          children: \"NEXT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(0, true),\n          disabled: this.state.data !== {},\n          children: \"RANDOM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.setDistanceMode(1),\n          disabled: this.state.kilometers,\n          children: \"KM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.setDistanceMode(0),\n          disabled: !this.state.kilometers,\n          children: \"MI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.textBlock,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.paragraph,\n          children: \"Running Routes is a simple tool that uses the depth first search (DFS) algorithm with OpenStreetMap data to find and display running routes in your area. Click on the map to change the location of the marker, which will serve as the starting and ending point for all routes found. Specify the range of desired distances with the two textboxes. If the amount of routes to search for is left blank, a number will be picked based on route length to optimize performance. Be aware that large distances or routes in very dense areas will take a long time to be calculated.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this);\n  }\n}\n;\nexport default InputReader;","map":{"version":3,"names":["React","Component","MapRenderer","styles","titleImg","InputReader","state","data","textBoxValues","currentPosition","usedPosition","displayedPathIndex","kilometers","loading","requestError","markerCallback","position","roundedPosition","lat","lng","setState","handleInputChange","e","key","copyParams","target","value","undefined","navigator","geolocation","getCurrentPosition","success","error","console","log","handleSubmit","getLoops","cyclePaths","change","random","rand_index","Math","floor","loops","length","new_index","setDistanceMode","km","coords","latitude","lon","longitude","MapDisplay","activePath","path","center","distance","fetch","min_dist","max_dist","count","method","mode","then","res","json","catch","render","errorMessage","gradient","titleimg","container","button","input","short","textBlock","paragraph"],"sources":["/Users/alexyoung/Documents/React/app1/src/containers/InputReader.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport MapRenderer from './MapRenderer'\nimport styles from '../styles.module.css'\nimport 'leaflet/dist/leaflet.css'\nimport titleImg from '../running_man_text.png'\n\nclass InputReader extends Component {\n    \n    state = \n    {\n        data: {},\n        textBoxValues: {},\n        currentPosition: {},\n        usedPosition: {},\n        displayedPathIndex: -1,\n        kilometers: 0,\n        loading: false,\n        requestError: \"\"\n    }\n\n    markerCallback = (position) => {\n        let roundedPosition = {lat: position.lat, lng: position.lng};\n        this.setState({usedPosition: roundedPosition});\n    }\n\n    handleInputChange = (e, key) => {\n        let copyParams = { ...this.state.textBoxValues, [key]: e.target.value};\n        this.setState({textBoxValues: copyParams});\n\n        if(this.state.currentPosition.lat === undefined) //assumes you won't change loc before reloading page\n        {\n            if(navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(this.success, this.error);\n            } else {\n                console.log(\"Could not use geolocation\");\n            }\n        }\n    }\n\n    handleSubmit = () =>\n    {\n        if(this.state.usedPosition.lat === undefined || this.state.usedPosition.lng === undefined) {\n            this.setState({usedPosition: this.state.currentPosition}, () => {\n                this.getLoops()\n            });\n        } else {\n            this.getLoops();\n        }\n\n        console.log(\"Button Pressed\");\n    }\n\n    cyclePaths = (change, random) =>\n    {\n        if(this.state.displayedPathIndex !== -1) {\n            if(random) {\n                let rand_index = Math.floor(Math.random() * (this.state.data.loops.length - 1));\n                while(rand_index === this.state.displayedPathIndex && this.state.data.loops.length > 1) {\n                    rand_index = Math.floor(Math.random() * (this.state.data.loops.length - 1));\n                }\n                this.setState({displayedPathIndex: rand_index});\n            } else {\n                let new_index = this.state.displayedPathIndex + change;\n                if(new_index >= 0 && new_index < this.state.data.loops.length) {\n                    this.setState({displayedPathIndex: new_index});\n                }\n            }\n        }\n    }\n\n    setDistanceMode = (km) =>\n    {\n        this.setState({kilometers: km});\n    }\n\n    getLoops() {\n        this.setState({loading: true});\n        this.setState({requestError: \"\"});\n\n        fetch(`http://127.0.0.1:5000/data?dist_min=${this.state.textBoxValues.min_dist}&dist_max=${this.state.textBoxValues.max_dist}&loc_lat=${this.state.usedPosition.lat}&loc_lon=${this.state.usedPosition.lng}&km=${this.state.kilometers}&count=${this.state.textBoxValues.count}`, { method: 'get', mode: 'cors' })\n        .then(\n            res => res.json()\n        ).then(\n            data => {\n                this.setState({data: data});\n                this.setState({loading: false});\n                if(data.loops.length > 0) {\n                    this.setState({displayedPathIndex: 0});\n                } else {\n                    this.setState({requestError: \"No routes were found. Try adjusting your distances or starting location.\"})\n                    this.setState({data:{}})\n                }\n            }\n        ).catch((error) => {\n            console.log(error);\n            this.setState({loading: false});\n            this.setState({requestError: \"The request failed. Adjust your parameters and try again, or check console for error messages.\"});\n        });\n    }\n\n    success = (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        \n        this.setState({currentPosition: {lat:lat, lng:lon}});\n    }\n\n    error() {\n        console.log(\"Could not get location\");\n    }\n    \n    MapDisplay = () => {\n        //const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex].path : [];\n        const activePath = this.state.data.loops !== undefined ? this.state.data.loops[this.state.displayedPathIndex] : {path: [], center: [], distance: 0.0}\n\n        if(this.state.currentPosition.lat === undefined) { //await current position\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n            return (\n                <div></div>\n            );\n        } else {\n            return (\n                <div>\n                    <MapRenderer currentPosition={this.state.currentPosition} activePath={activePath} kilometers={this.state.kilometers} markerCallback={this.markerCallback}/>\n                </div>\n            );\n        }\n    }\n    \n    render(){\n\n        const errorMessage = this.state.requestError === \"\" ? (<div></div>) : (<p className={styles.error}>{this.state.requestError}</p>);\n        console.log(this.state.data);\n        return(\n            <div>\n                <div className={styles.gradient}>\n                    <img src={titleImg} alt=\"Running Routes\" className={styles.titleimg}></img>\n                </div>\n                <this.MapDisplay/>\n                {errorMessage}\n                <div className={styles.container}>\n                    <button className={styles.button} onClick={this.handleSubmit} disabled={this.state.loading}>\n                        FIND ROUTES\n                    </button>\n                    <input\n                        className={styles.input}\n                        placeholder=\"Min Dist\"\n                        title=\"Minimum possible distance for a route\"\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"min_dist\")} //min distance\n                    />\n                    <input\n                        className={styles.input}\n                        placeholder=\"Max Dist\"\n                        title=\"Maximum possible distance for a route\"\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"max_dist\")} //max distance\n                    />\n                    <input\n                        className={styles.input + \" \" + styles.short}\n                        placeholder=\"#\"\n                        title=\"Amount of routes to find (automatic if blank)\"\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"count\")} //max distance\n                    />\n                    <button className={styles.button} onClick={() => this.cyclePaths(-1, false)} disabled={this.state.data === {} ? this.state.displayedPathIndex === 0 : true}>PREV</button>\n                    <button className={styles.button} onClick={() => this.cyclePaths(1, false)} disabled={this.state.data === {} ? this.state.displayedPathIndex === this.state.data.loops.length - 1 : true}>NEXT</button>\n                    <button className={styles.button} onClick={() => this.cyclePaths(0, true)} disabled={this.state.data !== {}}>RANDOM</button>\n\n                    <button className={styles.button} onClick={() => this.setDistanceMode(1)} disabled={this.state.kilometers}>KM</button>\n                    <button className={styles.button} onClick={() => this.setDistanceMode(0)} disabled={!this.state.kilometers}>MI</button>\n                </div>\n                <div className={styles.textBlock}>\n                    <p className={styles.paragraph}>\n                        Running Routes is a simple tool that uses the depth first search (DFS) algorithm with OpenStreetMap data to find and display running routes in your area.\n                        Click on the map to change the location of the marker, which will serve as the starting and ending point for all routes found. Specify the range of desired distances\n                        with the two textboxes. If the amount of routes to search for is left blank, a number will be picked based on route length to optimize performance.\n                        Be aware that large distances or routes in very dense areas will take a long time to be calculated.\n                    </p>\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default InputReader;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}