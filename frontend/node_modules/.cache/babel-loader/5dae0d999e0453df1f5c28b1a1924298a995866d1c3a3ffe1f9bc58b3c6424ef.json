{"ast":null,"code":"var _jsxFileName = \"/Users/alexyoung/Documents/React/app1/src/containers/inputReader.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { Component, useMemo } from \"react\";\nimport styles from '../styles.module.css';\nimport { MapContainer, TileLayer, Polyline, Popup, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction findEstimatedTime(paceInSeconds, distance) {\n  let totalTime = Math.floor(distance * paceInSeconds);\n  let hours = Math.floor(totalTime / 3600);\n  let minutes = Math.floor((totalTime - hours * 3600) / 60);\n  let seconds = totalTime - hours * 3600 - minutes * 60;\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n  if (minutes < 10 && hours >= 1) {\n    minutes = `0${minutes}`;\n  }\n  if (hours === 0) {\n    return `${minutes}:${seconds}`;\n  } else {\n    return `${hours}:${minutes}:${seconds}`;\n  }\n}\nfunction RenderPolyline(_ref) {\n  _s();\n  let {\n    path,\n    kilometers\n  } = _ref;\n  const map = useMap();\n  const lineColor = {\n    color: 'red'\n  };\n  let dist = path.distance;\n  let t1,\n    t2,\n    t3 = \"\";\n  if (kilometers) {\n    dist = dist * 1.609;\n    t1 = `Time at 4:45/kilometer: ${findEstimatedTime(60 * 4.75, dist)}`;\n    t2 = `Time at 4:15/kilometer: ${findEstimatedTime(60 * 4.25, dist)}`;\n    t3 = `Time at 3:45/kilometer: ${findEstimatedTime(60 * 3.75, dist)}`;\n  } else {\n    t1 = `Time at 8:00/mile: ${findEstimatedTime(60 * 8, dist)}`;\n    t2 = `Time at 7:30/mile: ${findEstimatedTime(60 * 7.5, dist)}`;\n    t3 = `Time at 7:00/mile: ${findEstimatedTime(60 * 7, dist)}`;\n  }\n  if (path.path.length > 0) {\n    map.setView(path.center, 15);\n  }\n  return /*#__PURE__*/_jsxDEV(Polyline, {\n    pathOptions: lineColor,\n    positions: path.path,\n    children: /*#__PURE__*/_jsxDEV(Popup, {\n      children: [`Distance: ${Math.round(dist * 100.0) / 100.0} ${kilometers ? \"kilometers\" : \"miles\"}`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 105\n      }, this), t1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), t2, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), t3]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(RenderPolyline, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n  return [useMap];\n});\n_c = RenderPolyline;\nfunction RenderMap(_ref2) {\n  _s2();\n  let {\n    currentPosition,\n    activePath,\n    kilometers\n  } = _ref2;\n  const activePathDependency = useMemo(() => {\n    return activePath;\n  }, [activePath]);\n  const kilometersDependency = useMemo(() => {\n    return kilometers;\n  }, [kilometers]);\n\n  //needed to prevent missing dependencies with useMemo for the polyline\n\n  const polyline = useMemo(() => /*#__PURE__*/_jsxDEV(RenderPolyline, {\n    path: activePathDependency,\n    kilometers: kilometersDependency\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 13\n  }, this), [activePathDependency, kilometersDependency]);\n  //polyline is only re rendered when active path or center point changes, so the map will not\n  //move when I type in the textboxes\n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    className: styles.map,\n    center: currentPosition,\n    zoom: 15,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), polyline]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n  //needs to be inside a function so I can use useMemo hook\n}\n_s2(RenderMap, \"R8qFYaIF1RfdY/WAv7CVjxUT/W0=\");\n_c2 = RenderMap;\nclass InputReader extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data: {},\n      textBoxValues: {},\n      currentPosition: [],\n      displayedPathIndex: -1,\n      kilometers: 0\n    };\n    this.handleInputChange = (e, key) => {\n      let copyParams = {\n        ...this.state.textBoxValues,\n        [key]: e.target.value\n      };\n      this.setState({\n        textBoxValues: copyParams\n      });\n      if (this.state.currentPosition.length === 0)\n        //assumes you won't change loc before reloading page\n        {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n          } else {\n            console.log(\"Could not use geolocation\");\n          }\n        }\n    };\n    this.handleSubmit = () => {\n      const params = this.state.textBoxValues;\n      if (params.loc_lat === undefined || params.loc_lon === undefined || params.loc_lat === \"\" || params.loc_lon === \"\") {\n        const pos = this.state.currentPosition;\n        let copyParams = {\n          ...this.state.textBoxValues,\n          loc_lat: pos[0],\n          loc_lon: pos[1]\n        };\n        this.setState({\n          textBoxValues: copyParams\n        }, () => {\n          this.getLoops();\n        });\n      } else {\n        this.getLoops();\n      }\n      console.log(\"Button Pressed\");\n    };\n    this.cyclePaths = change => {\n      let new_index = this.state.displayedPathIndex + change;\n      if (this.state.displayedPathIndex !== -1) {\n        if (new_index >= 0 && new_index < this.state.data.loops.length) {\n          this.setState({\n            displayedPathIndex: new_index\n          });\n        }\n      }\n    };\n    this.setDistanceMode = km => {\n      this.setState({\n        kilometers: km\n      });\n    };\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      this.setState({\n        currentPosition: [lat, lon]\n      });\n    };\n    this.MapDisplay = () => {\n      //const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex].path : [];\n      const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex] : {\n        path: [],\n        center: [],\n        distance: 0.0\n      };\n      const currentPosition = activePath.path.length > 0 ? activePath.path[0] : this.state.currentPosition;\n      if (currentPosition.length === 0) {\n        //await current position\n        navigator.geolocation.getCurrentPosition(this.success, this.error);\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(RenderMap, {\n            currentPosition: currentPosition,\n            activePath: activePath,\n            kilometers: this.state.kilometers\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this);\n      }\n    };\n  }\n  getLoops() {\n    const params = this.state.textBoxValues;\n    fetch(`http://127.0.0.1:5000/data?dist_min=${params.min_dist}&dist_max=${params.max_dist}&loc_lat=${params.loc_lat}&loc_lon=${params.loc_lon}&km=${this.state.kilometers}`, {\n      method: 'get',\n      mode: 'cors'\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        data: data\n      });\n      if (data.loops.length > 0) {\n        this.setState({\n          displayedPathIndex: 0\n        });\n      } else {\n        console.log(\"No loops were found\");\n      }\n      console.log(data);\n    });\n  }\n  error() {\n    console.log(\"Could not get location\");\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(this.MapDisplay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: this.handleSubmit,\n          children: \"FIND ROUTES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"loc_lat\") //location lat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"loc_lon\") //location lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input + \" \" + styles.short,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"min_dist\") //min distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input + \" \" + styles.short,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"max_dist\") //max distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(-1),\n          children: \"PREV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.cyclePaths(1),\n          children: \"NEXT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.setDistanceMode(1),\n          disabled: this.state.kilometers,\n          children: \"KM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: () => this.setDistanceMode(0),\n          disabled: !this.state.kilometers,\n          children: \"MI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.paragraph,\n        children: [\"Many runners find themselves bored of repeating the same routes over and over again.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 105\n        }, this), \"That's why I created runningroutes.com, a free tool designed to give runners ideas of where to run.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 120\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this);\n  }\n}\n;\nexport default InputReader;\nvar _c, _c2;\n$RefreshReg$(_c, \"RenderPolyline\");\n$RefreshReg$(_c2, \"RenderMap\");","map":{"version":3,"names":["React","Component","useMemo","styles","MapContainer","TileLayer","Polyline","Popup","useMap","findEstimatedTime","paceInSeconds","distance","totalTime","Math","floor","hours","minutes","seconds","RenderPolyline","path","kilometers","map","lineColor","color","dist","t1","t2","t3","length","setView","center","round","RenderMap","currentPosition","activePath","activePathDependency","kilometersDependency","polyline","InputReader","state","data","textBoxValues","displayedPathIndex","handleInputChange","e","key","copyParams","target","value","setState","navigator","geolocation","getCurrentPosition","success","error","console","log","handleSubmit","params","loc_lat","undefined","loc_lon","pos","getLoops","cyclePaths","change","new_index","loops","setDistanceMode","km","position","lat","coords","latitude","lon","longitude","MapDisplay","fetch","min_dist","max_dist","method","mode","then","res","json","render","container","button","input","short","paragraph"],"sources":["/Users/alexyoung/Documents/React/app1/src/containers/inputReader.js"],"sourcesContent":["import React, { Component, useMemo } from \"react\";\nimport styles from '../styles.module.css'\nimport { MapContainer, TileLayer, Polyline, Popup, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nfunction findEstimatedTime(paceInSeconds, distance)\n{\n    let totalTime = Math.floor(distance * paceInSeconds);\n    let hours = Math.floor(totalTime / 3600);\n    let minutes = Math.floor((totalTime - hours * 3600) / 60)\n    let seconds = totalTime - hours * 3600 - minutes * 60;\n    \n    if(seconds < 10){\n        seconds = `0${seconds}`\n    }\n    if(minutes < 10 && hours >= 1){\n        minutes = `0${minutes}`\n    }\n\n\n    if(hours === 0) {\n        return `${minutes}:${seconds}`;\n    } else {\n        return `${hours}:${minutes}:${seconds}`;\n    }\n}\n\nfunction RenderPolyline({ path, kilometers })\n{\n    const map = useMap();\n    const lineColor = { color: 'red' };\n    let dist = path.distance;\n\n    let t1, t2, t3 = \"\";\n    if(kilometers){\n        dist = dist * 1.609;\n        t1 = `Time at 4:45/kilometer: ${findEstimatedTime(60 * 4.75, dist)}`;\n        t2 = `Time at 4:15/kilometer: ${findEstimatedTime(60 * 4.25, dist)}`;\n        t3 = `Time at 3:45/kilometer: ${findEstimatedTime(60 * 3.75, dist)}`\n    } else {\n        t1 = `Time at 8:00/mile: ${findEstimatedTime(60 * 8, dist)}`\n        t2 = `Time at 7:30/mile: ${findEstimatedTime(60 * 7.5, dist)}`;\n        t3 = `Time at 7:00/mile: ${findEstimatedTime(60 * 7, dist)}`;\n    }\n\n    if(path.path.length > 0)\n    {\n        map.setView(path.center, 15);\n    }\n\n    return(\n        <Polyline pathOptions={lineColor} positions={path.path}>\n            <Popup>\n                {`Distance: ${Math.round(dist * 100.0) / 100.0} ${kilometers ? \"kilometers\" : \"miles\"}`}<br/>\n                {t1}<br/>\n                {t2}<br/>\n                {t3}\n            </Popup>\n        </Polyline>\n    );\n}\n\nfunction RenderMap({ currentPosition, activePath, kilometers })\n{\n    const activePathDependency = useMemo(() => {\n        return activePath;\n    }, [activePath]);\n\n    const kilometersDependency = useMemo(() => {\n        return kilometers;\n    }, [kilometers]);\n\n    //needed to prevent missing dependencies with useMemo for the polyline\n\n    const polyline = useMemo(\n        () => (\n            <RenderPolyline path={activePathDependency} kilometers={kilometersDependency}/>\n        ),\n        [activePathDependency, kilometersDependency]\n    ) \n    //polyline is only re rendered when active path or center point changes, so the map will not\n    //move when I type in the textboxes\n\n    return (\n        <MapContainer className = {styles.map} center={currentPosition} zoom={15}>\n            <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            {polyline}\n        </MapContainer>\n    );\n    //needs to be inside a function so I can use useMemo hook\n}\n\nclass InputReader extends Component {\n    \n    state = \n    {\n        data: {},\n        textBoxValues: {},\n        currentPosition: [],\n        displayedPathIndex: -1,\n        kilometers: 0\n    }\n\n    handleInputChange = (e, key) => {\n        let copyParams = { ...this.state.textBoxValues, [key]: e.target.value};\n        this.setState({textBoxValues: copyParams});\n\n        if(this.state.currentPosition.length === 0) //assumes you won't change loc before reloading page\n        {\n            if(navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(this.success, this.error);\n            } else {\n                console.log(\"Could not use geolocation\");\n            }\n        }\n    }\n\n    handleSubmit = () =>\n    {\n        const params = this.state.textBoxValues;\n        \n        if(params.loc_lat === undefined || params.loc_lon === undefined || params.loc_lat === \"\" || params.loc_lon === \"\") {\n            const pos = this.state.currentPosition;\n            let copyParams = { ...this.state.textBoxValues, loc_lat: pos[0], loc_lon: pos[1]};\n            this.setState({textBoxValues: copyParams}, () => {\n                this.getLoops()\n            });\n        } else {\n            this.getLoops();\n        }\n\n        console.log(\"Button Pressed\");\n    }\n\n    cyclePaths = (change) =>\n    {\n        let new_index = this.state.displayedPathIndex + change;\n        if(this.state.displayedPathIndex !== -1) {\n            if(new_index >= 0 && new_index < this.state.data.loops.length) {\n                this.setState({displayedPathIndex: new_index});\n            }\n        }\n    }\n\n    setDistanceMode = (km) =>\n    {\n        this.setState({kilometers: km});\n    }\n\n    getLoops() {\n        const params = this.state.textBoxValues;\n\n        fetch(`http://127.0.0.1:5000/data?dist_min=${params.min_dist}&dist_max=${params.max_dist}&loc_lat=${params.loc_lat}&loc_lon=${params.loc_lon}&km=${this.state.kilometers}`, { method: 'get', mode: 'cors' }).then(\n            res => res.json()\n        ).then(\n            data => {\n                this.setState({data: data});\n                if(data.loops.length > 0) {\n                    this.setState({displayedPathIndex: 0});\n                } else {\n                    console.log(\"No loops were found\");\n                }\n                console.log(data);\n            }\n        );\n    }\n\n    success = (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        \n        this.setState({currentPosition: [lat, lon]});\n    }\n\n    error() {\n        console.log(\"Could not get location\");\n    }\n    \n    MapDisplay = () => {\n        //const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex].path : [];\n        const activePath = this.state.displayedPathIndex !== -1 ? this.state.data.loops[this.state.displayedPathIndex] : {path: [], center: [], distance: 0.0}\n        const currentPosition = activePath.path.length > 0 ? activePath.path[0] : this.state.currentPosition;\n\n        if(currentPosition.length === 0) { //await current position\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n            return (\n                <div></div>\n            );\n        } else {\n            return (\n                <div>\n                    <RenderMap currentPosition={currentPosition} activePath={activePath} kilometers={this.state.kilometers}/>\n                </div>\n            );\n        }\n    }\n    \n    render(){\n        return(\n            <div>\n                <this.MapDisplay/>\n                <div className={styles.container}>\n                    <button className={styles.button} onClick={this.handleSubmit}>\n                        FIND ROUTES\n                    </button>\n                    <input\n                        className={styles.input}\n                        type='number'\n                        onChange={e => this.handleInputChange(e, \"loc_lat\")} //location lat\n                    />\n                    <input\n                        className={styles.input}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"loc_lon\")} //location lon\n                    />\n                    <input\n                        className={styles.input + \" \" + styles.short}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"min_dist\")} //min distance\n                    />\n                    <input\n                        className={styles.input + \" \" + styles.short}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"max_dist\")} //max distance\n                    />\n                    <button className={styles.button} onClick={() => this.cyclePaths(-1)}>\n                        PREV\n                    </button>\n                    <button className={styles.button} onClick={() => this.cyclePaths(1)}>\n                        NEXT\n                    </button>\n                    <button className={styles.button} onClick={() => this.setDistanceMode(1)} disabled={this.state.kilometers}>KM</button>\n                    <button className={styles.button} onClick={() => this.setDistanceMode(0)} disabled={!this.state.kilometers}>MI</button>\n                </div>\n                <p className={styles.paragraph}>\n                    Many runners find themselves bored of repeating the same routes over and over again.<br/> \n                    That's why I created runningroutes.com, a free tool designed to give runners ideas of where to run.<br/>\n                </p>\n            </div>\n        )\n    }\n};\n\nexport default InputReader;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}