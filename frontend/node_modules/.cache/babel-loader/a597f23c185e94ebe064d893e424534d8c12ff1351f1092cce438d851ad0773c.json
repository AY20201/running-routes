{"ast":null,"code":"var _jsxFileName = \"/Users/alexyoung/Documents/React/app1/src/containers/inputReader.js\";\nimport React, { Component } from \"react\";\nimport styles from '../styles.module.css';\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass InputReader extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data: {},\n      textBoxValues: {},\n      currentPosition: []\n    };\n    this.handleInputChange = (e, key) => {\n      let copyParams = {\n        ...this.state.textBoxValues,\n        [key]: e.target.value\n      };\n      this.setState({\n        textBoxValues: copyParams\n      });\n      if (this.state.currentPosition.length === 0)\n        //assumes you won't change loc before reloading page\n        {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n          } else {\n            console.log(\"Could not use geolocation\");\n          }\n        }\n    };\n    this.handleSubmit = () => {\n      const params = this.state.textBoxValues;\n      if (params[\"loc_lat\"] === undefined || params[\"loc_lon\"] === undefined) {\n        if (navigator.geolocation) {\n          const pos = this.state.currentPosition;\n          let copyParams = {\n            ...this.state.textBoxValues,\n            loc_lat: pos[0],\n            loc_lon: pos[1]\n          };\n          this.setState({\n            textBoxValues: copyParams\n          }, () => {\n            this.getLoops();\n          });\n        } else {\n          console.log(\"Could not use geolocation\");\n        }\n      } else {\n        this.getLoops();\n      }\n\n      //console.log(textBoxParams);\n      console.log(\"Button Pressed\");\n    };\n    this.success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      this.setState({\n        currentPosition: [lat, lon]\n      });\n    };\n    this.MapDisplay = () => {\n      const currentPosition = this.state.currentPosition;\n      const activePath = [];\n      if (this.state.data !== {}) {\n        activePath = this.state.data[\"loops\"][0][\"path\"];\n      }\n      if (currentPosition.length === 0) {\n        //await current position\n        navigator.geolocation.getCurrentPosition(this.success, this.error);\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(MapContainer, {\n          className: styles.map,\n          center: currentPosition,\n          zoom: 13,\n          children: /*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this);\n      }\n    };\n  }\n  getLoops() {\n    const params = this.state.textBoxValues;\n    fetch(`http://127.0.0.1:5000/data?dist_min=${params[\"min_dist\"]}&dist_max=${params[\"max_dist\"]}&loc_lat=${params[\"loc_lat\"]}&loc_lon=${params[\"loc_lon\"]}`, {\n      method: 'get',\n      mode: 'cors'\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        data: data\n      });\n      console.log(data);\n    });\n  }\n  error() {\n    console.log(\"Could not get location\");\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(this.MapDisplay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: this.handleSubmit,\n          children: \"FIND ROUTES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"loc_lat\") //location lat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"loc_lon\") //location lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"min_dist\") //min distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.input,\n          type: \"number\",\n          onChange: e => this.handleInputChange(e, \"max_dist\") //max distance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n}\n;\nexport default InputReader;","map":{"version":3,"names":["React","Component","styles","MapContainer","TileLayer","InputReader","state","data","textBoxValues","currentPosition","handleInputChange","e","key","copyParams","target","value","setState","length","navigator","geolocation","getCurrentPosition","success","error","console","log","handleSubmit","params","undefined","pos","loc_lat","loc_lon","getLoops","position","lat","coords","latitude","lon","longitude","MapDisplay","activePath","map","fetch","method","mode","then","res","json","render","container","button","input"],"sources":["/Users/alexyoung/Documents/React/app1/src/containers/inputReader.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport styles from '../styles.module.css'\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n\nclass InputReader extends Component {\n    \n    state = \n    {\n        data: {},\n        textBoxValues: {},\n        currentPosition: []\n    }\n    \n    handleInputChange = (e, key) => {\n        let copyParams = { ...this.state.textBoxValues, [key]: e.target.value};\n        this.setState({textBoxValues: copyParams});\n\n        if(this.state.currentPosition.length === 0) //assumes you won't change loc before reloading page\n        {\n            if(navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(this.success, this.error);\n            } else {\n                console.log(\"Could not use geolocation\");\n            }\n        }\n    }\n    \n    handleSubmit = () =>\n    {\n        const params = this.state.textBoxValues;\n        \n        if(params[\"loc_lat\"] === undefined || params[\"loc_lon\"] === undefined) {\n            if(navigator.geolocation) {\n                const pos = this.state.currentPosition;\n                let copyParams = { ...this.state.textBoxValues, loc_lat: pos[0], loc_lon: pos[1]};\n                this.setState({textBoxValues: copyParams}, () => {\n                    this.getLoops()\n                });\n            } else {\n                console.log(\"Could not use geolocation\");\n            }\n        } else {\n            this.getLoops();\n        }\n\n        //console.log(textBoxParams);\n        console.log(\"Button Pressed\");\n    }\n\n    getLoops() {\n        const params = this.state.textBoxValues;\n\n        fetch(`http://127.0.0.1:5000/data?dist_min=${params[\"min_dist\"]}&dist_max=${params[\"max_dist\"]}&loc_lat=${params[\"loc_lat\"]}&loc_lon=${params[\"loc_lon\"]}`, { method: 'get', mode: 'cors' }).then(\n            res => res.json()\n        ).then(\n            data => {\n                this.setState({data: data})\n                console.log(data)\n            }\n        );\n    }\n\n    success = (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        \n        this.setState({currentPosition: [lat, lon]});\n    }\n\n    error() {\n        console.log(\"Could not get location\");\n    }\n    \n    MapDisplay = () => {\n        const currentPosition = this.state.currentPosition;\n        const activePath = [];\n        if(this.state.data !== {}) {\n            activePath = this.state.data[\"loops\"][0][\"path\"];\n        }\n\n        if(currentPosition.length === 0) { //await current position\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n            return (\n                <div></div>\n            );\n        } else {\n            return (\n                <MapContainer className = {styles.map} center={currentPosition} zoom={13}>\n                    <TileLayer\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                    />\n                </MapContainer>\n            );\n        }\n    }\n    \n    render(){\n        return(\n            <div>\n                <this.MapDisplay/>\n                <div className={styles.container}>\n                    <button className={styles.button} onClick={this.handleSubmit}>\n                        FIND ROUTES\n                    </button>\n                    <input\n                        className={styles.input}\n                        type='number'\n                        onChange={e => this.handleInputChange(e, \"loc_lat\")} //location lat\n                    />\n                    <input\n                        className={styles.input}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"loc_lon\")} //location lon\n                    />\n                    <input\n                        className={styles.input}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"min_dist\")} //min distance\n                    />\n                    <input\n                        className={styles.input}\n                        type='number' \n                        onChange={e => this.handleInputChange(e, \"max_dist\")} //max distance\n                    />\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default InputReader;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}